{"version":3,"sources":["components/Button.jsx","components/ClearButton.jsx","components/Value.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","val","className","this","props","children","isNaN","onClick","handleClick","Component","ClearButton","Value","value","App","state","writeToValue","bind","clearValue","computeValue","setState","math","err","alert","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2WAsBeA,G,uLAlBH,IACWC,EADZ,OAKP,OACE,yBACEC,UAAS,kBANMD,EAOFE,KAAKC,MAAMC,SANlBC,MAAML,IAAgB,MAARA,GAAuB,MAARA,EAMQ,WAAP,OAEpCM,QAAS,kBAAM,EAAKH,MAAMI,YAAY,EAAKJ,MAAMC,YAEhDF,KAAKC,MAAMC,c,GAbCI,cCUNC,G,uLATH,IAAD,OACP,OACE,yBAAKR,UAAU,eAAeK,QAAS,kBAAM,EAAKH,MAAMI,gBACrDL,KAAKC,MAAMC,c,GAJMI,cCMXE,G,uLAJX,OAAO,yBAAKT,UAAU,SAASC,KAAKC,MAAMQ,W,GAF1BH,c,QC6ELI,G,kBAxEb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXF,MAAO,IAET,EAAKG,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBAPR,E,0EAUDf,GACXE,KAAKgB,SAAS,CACZP,MAAOT,KAAKW,MAAMF,MAAQX,M,qCAK5B,GAAyB,KAArBE,KAAKW,MAAMF,MACb,IACET,KAAKgB,SAAS,CACZP,MAAOQ,IAAcjB,KAAKW,MAAMF,SAElC,MAAOS,GACPC,MAAM,0B,mCAMVnB,KAAKgB,SAAS,CACZP,MAAO,O,+BAKT,OACE,yBAAKV,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAOU,MAAOT,KAAKW,MAAMF,QACzB,yBAAKV,UAAU,OACb,kBAAC,EAAD,CAAQM,YAAaL,KAAKY,cAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaL,KAAKY,cAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaL,KAAKY,cAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaL,KAAKY,cAA1B,MAEF,yBAAKb,UAAU,OACb,kBAAC,EAAD,CAAQM,YAAaL,KAAKY,cAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaL,KAAKY,cAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaL,KAAKY,cAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaL,KAAKY,cAA1B,MAEF,yBAAKb,UAAU,OACb,kBAAC,EAAD,CAAQM,YAAaL,KAAKY,cAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaL,KAAKY,cAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaL,KAAKY,cAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaL,KAAKY,cAA1B,MAEF,yBAAKb,UAAU,OACb,kBAAC,EAAD,CAAQM,YAAaL,KAAKY,cAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaL,KAAKY,cAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaL,KAAKe,cAA1B,KACA,kBAAC,EAAD,CAAQV,YAAaL,KAAKY,cAA1B,MAEF,yBAAKb,UAAU,OACb,kBAAC,EAAD,CAAaM,YAAaL,KAAKc,YAA/B,gB,GAjEMR,cCKEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.eb5ec8ea.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Button.css\";\r\n\r\nclass Button extends Component {\r\n  render() {\r\n    const isOperator = val => {\r\n      return !isNaN(val) || val === \".\" || val === \"=\";\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={`button ${\r\n          isOperator(this.props.children) ? null : \"operator\"\r\n        }`}\r\n        onClick={() => this.props.handleClick(this.props.children)}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport \"./ClearButton.css\";\r\n\r\nclass ClearButton extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"clear-button\" onClick={() => this.props.handleClick()}>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClearButton;\r\n","import React, { Component } from \"react\";\r\nimport \"./Value.css\";\r\n\r\nclass Value extends Component {\r\n  render() {\r\n    return <div className=\"value\">{this.props.value}</div>;\r\n  }\r\n}\r\n\r\nexport default Value;\r\n","import React, { Component } from \"react\";\nimport Button from \"./components/Button\";\nimport ClearButton from \"./components/ClearButton\";\nimport Value from \"./components/Value\";\nimport * as math from \"mathjs\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\"\n    };\n    this.writeToValue = this.writeToValue.bind(this);\n    this.clearValue = this.clearValue.bind(this);\n    this.computeValue = this.computeValue.bind(this);\n  }\n\n  writeToValue(val) {\n    this.setState({\n      value: this.state.value + val\n    });\n  }\n\n  computeValue() {\n    if (this.state.value !== \"\") {\n      try {\n        this.setState({\n          value: math.evaluate(this.state.value)\n        });\n      } catch (err) {\n        alert(\"Not valid operation\");\n      }\n    }\n  }\n\n  clearValue() {\n    this.setState({\n      value: \"\"\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"calc-wrapper\">\n          <Value value={this.state.value}></Value>\n          <div className=\"row\">\n            <Button handleClick={this.writeToValue}>8</Button>\n            <Button handleClick={this.writeToValue}>7</Button>\n            <Button handleClick={this.writeToValue}>9</Button>\n            <Button handleClick={this.writeToValue}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.writeToValue}>5</Button>\n            <Button handleClick={this.writeToValue}>4</Button>\n            <Button handleClick={this.writeToValue}>6</Button>\n            <Button handleClick={this.writeToValue}>*</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.writeToValue}>1</Button>\n            <Button handleClick={this.writeToValue}>2</Button>\n            <Button handleClick={this.writeToValue}>3</Button>\n            <Button handleClick={this.writeToValue}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.writeToValue}>.</Button>\n            <Button handleClick={this.writeToValue}>0</Button>\n            <Button handleClick={this.computeValue}>=</Button>\n            <Button handleClick={this.writeToValue}>-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClick={this.clearValue}>Clear</ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}